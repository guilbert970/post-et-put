app.post('/api/users', (req, res) => {
  const { firstname, lastname, email } = req.body;
  const db = connection.promise();
  let validationErrors = null;
  db.query('SELECT * FROM users WHERE email = ?', [email])
    .then(([result]) => {
      if (result[0]) return Promise.reject('DUPLICATE_EMAIL');
      validationErrors = Joi.object({
        email: Joi.string().email().max(255).required(),
        firstname: Joi.string().max(255).required(),
        lastname: Joi.string().max(255).required(),
        city: Joi.string().max(255).Joi.allow(null),
        language: Joi.string().max(255).Joi.allow(null),
      }).validate({ firstname, lastname, email }, { abortEarly: false }).error;
      if (validationErrors) return Promise.reject('INVALID_DATA');
      return db.query(
        'INSERT INTO users (firstname, lastname, email) VALUES (?, ?, ?, ?, ?)',
        [email, firstname, lastname, city, language]
      );
    })
    .then(([{ insertId }]) => {
      res.status(201).json({ id: insertId, firstname, lastname, email });
    })
    .catch((err) => {
      console.error(err);
      if (err === 'DUPLICATE_EMAIL')
        res.status(409).json({ message: 'This email is already used' });
      else if (err === 'INVALID_DATA')
        res.status(422).json({ validationErrors });
      else res.status(500).send('Error saving the user');
    });
});

app.put('/api/users/:id', (req, res) => {
  const userId = req.params.id;
  const db = connection.promise();
  let existingUser = null;
  db.query('SELECT * FROM users WHERE id = ?', [userId])
    .then(([results]) => {
      existingUser = results[0];
      if (!existingUser) return Promise.reject('RECORD_NOT_FOUND');
      validationErrors = Joi.object({
        email: Joi.string().email().max(255).allow(null),
        firstname: Joi.string().max(255).allow(null),
        lastname: Joi.string().max(255).allow(null),
        city: Joi.string().max(255).Joi.allow(null),
        language: Joi.string().max(255).Joi.allow(null),
      }).validate({ firstname, lastname, email }, { abortEarly: false }).error;
      if (validationErrors) return Promise.reject('INVALID_DATA');
      return db.query('UPDATE users SET ? WHERE id = ?', [req.body, userId]);
    })
    .then(() => {
      res.status(200).json({ ...existingUser, ...req.body });
    })
    .catch((err) => {
      console.error(err);
      if (err === 'RECORD_NOT_FOUND')
        res.status(404).send(`User with id ${userId} not found.`);
      else if (err === 'INVALID_DATA')
        res.status(422).json({ validationErrors });
      else res.status(500).send('Error updating a user');
    });
});
app.post('/api/movies', (req, res) => {
  const { title, director, year, color, duration } = req.body;
  const db = connection.promise();
  let validationErrors = null;
  db.query('SELECT * FROM users WHERE title = ?', [title])
    .then(([result]) => {
      if (result[0]) return Promise.reject('DUPLICATE_MOVIE');
      validationErrors = Joi.object({
        title: Joi.string().email().max(255).required(),
        director: Joi.string().max(255).required(),
        year: Joi.number().integer().min(1888),
        color: Joi.boolean().required(),
        duration: Joi.number().min(0),
      }).validate(
        { title, director, year, color, duration },
        { abortEarly: false }
      ).error;
      if (validationErrors) return Promise.reject('INVALID_DATA');
      return db.query(
        'INSERT INTO users (firstname, lastname, email) VALUES (?, ?, ?, ?, ?)',
        [title, director, year, color, duration]
      );
    })
    .then(([{ insertId }]) => {
      res
        .status(201)
        .json({ id: insertId, title, director, year, color, duration });
    })
    .catch((err) => {
      console.error(err);
      if (err === 'DUPLICATE_MOVIE')
        res.status(409).json({ message: 'This moive is already in DB' });
      else if (err === 'INVALID_DATA')
        res.status(422).json({ validationErrors });
      else res.status(500).send('Error saving the movie');
    });
});

app.put('/api/movies/:id', (req, res) => {
  const movieId = req.params.id;
  const db = connection.promise();
  let existingMovie = null;
  db.query('SELECT * FROM movies WHERE id = ?', [movieId])
    .then(([results]) => {
      if (!existingUser) return Promise.reject('RECORD_NOT_FOUND');
      validationErrors = Joi.object({
        title: Joi.string().email().max(255),
        director: Joi.string().max(255),
        year: Joi.number().integer().min(1888),
        color: Joi.boolean().required(),
        duration: Joi.number().min(0),
      }).validate({ firstname, lastname, email }, { abortEarly: false }).error;

      if (!existingMovie) return Promise.reject('RECORD_NOT_FOUND');
      return db.query('UPDATE movies SET ? WHERE id = ?', [req.body, movieId]);
    })
    .then(() => {
      res.status(200).json({ ...existingMovie, ...req.body });
    })
    .catch((err) => {
      console.error(err);
      if (err === 'RECORD_NOT_FOUND')
        res.status(404).send(`Movie with id ${movieId} not found.`);
      else res.status(500).send('Error updating a movie.');
    });
});
